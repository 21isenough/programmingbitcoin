== Transaction Creation and Validation

One of the trickiest things for a transaction is the process of validating a transaction. Closely following that is the act of creating the transaction itself. In this chapter, we'll cover the exact steps to validating a transaction and then creating one for ourselves.

=== Validating Transactions

Every node, when receiving transactions makes sure that the transaction adheres to the network rules. This process is called _transaction validation_. Here are the main things that a node needs to check for:

* Inputs of the transaction are previously unspent
* Sum of the inputs > sum of the outputs
* scriptSig actually unlocks the previous scriptPubKey

The first aspect prevents double-spending. Any input that's already been spent cannot be spent again.

The second aspect makes sure no new Bitcoins are created (except in a special transaction called the coinbase transaction. More on that in Chapter X).

The third aspect makes sure that the smart contract resolves to True. In the vast majority of transactions, this means checking that the one or more signatures in the scriptSig are valid.

Let's look at how each is done.

=== Checking the spentness of inputs

In order to prevent double-spending, each input has to be checked to see if it's previously been spent. In order to check that this input has *not* been used in any other transaction, we actually need access to the entire blockchain. We cannot glean from the transaction itself whether it's valid or not, no more than we can look at a line in a random personal check and determine whether that's overdrafting or not. The only way to know is to know what the entire set of transactions is.

In Bitcoin, we can determine whether an input is being double spent by keeping track of the unspent transaction outputs (aka UTXOs). If an input is in the UTXO set, the transaction is NOT double-spending. If the transaction passes the rest of the validity tests, then we remove all the inputs of the transaction from the UTXO set.

Light clients that do not have access to the blockchain have to trust other nodes for their information, including input spentness information. Of course, if the light client is the only one with the private key, then spending UTXOs that require that key should be impossible for anyone else, but there are cases where the same key is shared on multiple machines.

Simply put, a full node can check the spentness of an input pretty easily, a light node has to get this information from someone else.

=== Checking the sum of the inputs vs the sum of the outputs

The second part of the validation is making sure that the input sum is greater than or equal to the output sum. This ensures that the transaction does not create new coins. The one exception is a Coinbase transaction which we'll talk more about in the next chapter. The inputs don't have an amount, so this must be looked up on the blockchain. Once again, full nodes will have access to the amounts associated with the unspent output, but light nodes will have to depend on full nodes to supply this information.

The actual input sum - output sum is what we call the transaction fee. This amount goes to the miner and may in some cases be 0. Fees vary depending on other transactions trying to get into the blockchain. A lot of transactions trying to get into the blockchain will generally lead to higher fees and not as many will generally lead to lower fees.

TODO Code for fees, exercise for fees

=== Checking the Signature

Perhaps the trickiest part of validating a transaction is the process of checking its signatures. A transaction typically has at least one signature per input. If there are multisig outputs being spent, there may be more. As we learned in Chapter 4, the ECDSA signature algorithm requires that for each input, we need the public key (P), the signature hash (z), and the Signature (r,s). Once these are determined, the process of verifying the signature is pretty simple as we already coded in Chapter 4:

```python

point = Point.parse(sec)
signature = Signature.parse(der)
point.verify(z, signature)  # True
```

The sec and der formats make getting the P, r and s pretty simple. The hard part is getting the actual signature hash (z). You would think that this would be easy since you can just hash the transaction. But you can't do that since the signature itself is part of the scriptSig and a signature can't sign itself.

Instead, what you need to do is to modify the transaction before actually signing it. That is, you have to compute the z in a very particular way. The procedure is as follows.

==== Step 1: Empty all the scriptSigs

The first step is to empty all the scriptSigs when checking the signature. The same procedure is used for creating the signature, except the scriptSig is usually already empty.

TODO image of scriptSig being emptied

==== Step 2: Replace the scriptSig of the input being signed with the previous scriptPubKey

Each input points to a previous transaction output, which itself has a scriptPubKey. We take this scriptPubKey and put that in place of the empty scriptSig. You would think that this would require a lookup on the blockchain, and this may be the case. In practice, you already know the scriptPubKey as the input was chosen as one where you have the private key to unlock it. Therefore, you know the address it was sent to and thus, the scriptPubKey.

TODO image of scriptSig being replaced by scriptPubKey

==== Step 3: Append the hash type

Lastly, we add a 4-byte hash type to the end. This is to specify what the signature is authorizing. The signature can authorize that this input has to go with all the other inputs and outputs (SIGHASH_ALL), go with a specific output (SIGHASH_SINGLE) or go with none of the outputs (SIGHASH_NONE). The latter two have some theoretical use cases, but in practice, almost every transaction is signed with SIGHASH_ALL. That is, the entire transaction has to go through, or the input signature is invalid.

TODO image of hash type being appended

TODO Exercise to do this in code

=== Creating transactions

Once validation of transactions is understood, the creation of transactions is more or less straightforward. The key to making the creation of transactions work is to make sure that all the validations that are performed act as expected. For example, you will not want to create a transaction where the inputs are less than the outputs, creating extra bitcoins. Such transactions won't get validated and your propagation of them on the network may get you banned. To create a transaction, you must first have some outputs that have been sent to you. That is, outputs whose scriptPubKey you can unlock. The vast majority of the time, you will need one or more private keys corresponding to the public keys that are in the scriptPubKey.

The rest of this chapter will be concerned with creating a transaction whose scriptPubKey is a p2pkh output.

=== Creating a transaction

The construction of a transaction is most easily done by answering some basic questions:

1. Where do we want the bitcoins to go?
2. What outputs are assigned to our private key(s) that we can spend?
3. How quickly do we want these transactions to get into the blockchain?

The first question is about how much we want to pay whom. We can pay one or more addresses. For the sake of this example, say we want to pay XXXX address 0.01 BTC.

The second question is about what's in our wallet. What do we have available to spend? For the sake of this example, let's say we have one output that's 1.2 BTC. Since this is way more than 0.01 BTC, we'll want to send the rest back to ourselves. Though it's generally bad privacy and security practice to re-use addresses, we'll send the bitcoins back to the same address.

TODO Sidebar on why it's important not to re-use addresses

The third question is really about fees. If we want to get the transaction in faster, we'll want to pay more fees and if we don't mind waiting, we'll want to pay less. In our case, we'll use 0.0001 BTC as our fee.

TODO Sidebar about fee estimation

=== Combining to make a transaction

Our plan now laid out. We will have one input and two outputs.

TODO code for creating a transaction

=== Signing a transaction

The actual signing of the transaction is the trickiest part. Thankfully, we know how to get the sighash, or the z, from earlier in this chapter. We have to have the private key to actually sign the transaction and signing the z to produce the r and s of the signature is exactly what we need to do.

TODO code for signing a transaction

TODO exercise for creating the library function for signature creation

TODO testnet faucet: Getting coins to play with

TODO exercise for making your own testnet transaction

