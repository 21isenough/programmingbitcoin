[[chapter_script]]

== Script

The ability to lock and unlock coins is at the heart of what it means to transfer Bitcoin.

In this chapter we examine the mechanism by which Bitcoins are locked and unlocked, what you might call a smart contract.

TODO: more intro as to what script is.

=== Mechanics of SCRIPT

If you are confused about what a "smart contract" is, don't worry. "Smart contract" is a fancy way of saying "programmable" and the "smart contract language" is simply a programming language. SCRIPT is the smart contract langauge, or the programming language used to express how bitcoins are to be transferred.

Think of a personal check. In a sense, a personal check is a type of contract. A personal check is an agreement to transfer some amount of money from one person to another. Bitcoin has the digital equivalent of a contract in SCRIPT.

SCRIPT is a limited programming language in the sense that it doesn't have certain features. Specifically, it does not have any mechanism for loops and is not Turing complete.

TODO: sidebar on why Turing completeness is not a good idea

What you are required to do as part of a transaction is to assign Bitcoins to a *locking* script. The locking script is what's specified in ScriptPubKey (see chapter 5). Think of this as the locked box where some money is deposited which only the person with the key to the box can open. The money inside, of course, can only be accessed by someone with the key.

The actual unlocking of bitcoin is done in the ScriptSig field (see chapter 5) and proves ownership of the locked box in order to spend the funds.

=== How SCRIPT works

SCRIPT, as a language, operates by processing one item at a time. There are two possible types of items: elements and operations.

Elements are just data. They are byte strings of length 1 to 75. A typical element might be a der signature or a sec pubkey.

Operations do something to the data. They consume zero or more elements from the processing stack and put zero or more elements back on the stack. A typical elment might be something like OP_DUP, which will duplicate the top element (consuming 0) and putting a new element on top (putting 1).

TODO OP_DUP diagram

At the end of processing all the items in the stack, the top element of the stack must be non-zero for the script to execute successfully. Having no elements on the stack or having the top element be zero would result in a failed execution. Failed execution generally means that the transaction which includes the unlocking script is invalid.

=== Example Operations

Besides OP_DUP, there are other operations. OP_HASH160 does a sha256 followed by a ripemd160 to the top element of the stack (consuming 1) and putting a new element back (putting 1)

TODO OP_HASH160 diagram

Another very important operation is OP_CHECKSIG. OP_CHECKSIG consumes 2 elements from the stack, the first being the pubkey, the second being a signature, and examines if the signature is good for the given pubkey. If so, OP_CHECKSIG pushes a 1 onto the stack, otherwise puts a 0 on the stack.

TODO OP_CHECKSIG diagram

=== Parsing the script fields

Both ScriptPubKey and ScriptSig are parsed the same way. If the byte is between 0x01 and 0x4B (which we call n), we read the next n bytes as an element. Otherwise, the byte represents an operation, which we have to look up. Here are some operations and their byte code:

0x75 - OP_DUP

0x93 - OP_ADD

0xa9 - OP_HASH160

0xac - OP_CHECKSIG

There are many more and the full list can be found at http://wiki.bitcoin.it

==== Coding a Script parser

[source,python]
----
class Script:

    @classmethod
    def parse(cls, binary):
        s = BytesIO(binary)
        elements = []
        current = s.read(1)
        while current != b'':
            op_code = current[0]
            if op_code > 1 and op_code <= 75:
                # we have an element
                elements.append(s.read(op_code))
            else:
                elements.append(op_code)
            current = s.read(1)
        return cls(elements)
----

=== Combining the script fields

Since ScriptSig unlocks ScriptPubKey, we need a mechanism by which the two scripts combine. What we do in Bitcoin is take the items from ScriptSig and ScriptPubKey like so:

TODO Diagram of how they combine

Each item is processed one at a time until no items are left to be processed or if the script exits early.

To show exactly how all this works, we'll next take a look at the original script pay-to-pubkey

=== Types of scripts

There are many types of standard scripts in Bitcoin including the following:

p2pk - Pay-to-pubkey
p2pkh - Pay-to-pubkey-hash
p2sh - Pay-to-script-hash
p2wpkh - Pay-to-witness-pubkey-hash
p2wsh - Pay-to-witness-script-hash

Addresses are actually compressed ScriptPubKeys. Wallets know how to interpret various address types (p2pkh, p2sh, bech32) and create the appropriate ScriptPubKey. All of the above have a particular type of address format so people can pay to them.

We'll cover pay-to-pubkey and pay-to-pubkey-hash for the rest of the chapter.

=== p2pk

Pay-to-pubkey (aka p2pk) was used almost exclusively during the early days of bitcoin. Most of coins thought to belong to Satoshi, for example, are in p2pk outputs. There are some limitations that we'll discuss in a few pages, but here, let's focus on how p2pk works.

We learned back in chapter 3 how signing and verification work in ECDSA. Specifically, you need the message (z), the public key (P) and the signature (r,s). The mechanics of p2pk are simply that you send bitcoins to a public key and let the owner of the private key determine where the bitcoins should go. Effectively, you are putting those bitcoins under the control of the private key owner.

Specifying where the bitcoins go is the job of the scriptPubKey. As stated above, this is the lock box that receive the bitcoins. The actual scriptPubKey looks like this:

TODO Diagram of p2pk scriptPubKey

Note the OP_CHECKSIG, as that will be very important. The scriptSig is the part that unlocks the received bitcoins. In the case of p2pk, the scriptSig is just the signature.

TODO digram of p2pk scriptSig

The scriptPubKey and scriptSig combine to make a processing stack that looks like this:

TODO diagram of the p2pk script stack

At this point, the script is processed one item at a time.

TODO showing how p2pk stack resolves

OP_CHECKSIG consumes 2 stack items (pubkey and signature) and determines if they are valid for this transaction. OP_CHECKSIG will put a 1 back if the signature is valid, 0 if not.

This means that the script stack will validate if the signature is valid, but fail if the signature is not. Essentially, we are in a situation where the scriptSig will only unlock the scriptPubKey if the signature is valid for that pubkey. That is, we know the secret.

Incidentally, we can see here why scriptPubkey is called scriptPubKey. The Public Key in uncompressed SEC format is the main item in scriptPubKey in p2pk (the other being a OP_CHECKSIG). Similarly, scriptSig is named as such because p2pk has just the DER format signature in that field.

=== Problems with p2pk

Pay-to-pub-key is pretty intuitive in the sense that there is a public key that anyone can send some bitcoins to and a signature that can be produced by the owner of the private key to spend that amount. This works well, but there are some problems.

First, the public keys are long. We know from chapter 3 that SECP256K1 public points are 33 bytes in compressed and 65 bytes in uncompressed sec format. Unfortunately, you can't send the 33 or 65 bytes raw very easily. Most character encodings don't render certain byte ranges as they are control characters or newlines or similar. The sec format is typically rendered instead in hexadecimal, doubling the length (hex encodes 4 bits per character instead of 8). This makes the compressed and uncompressed formats 66 and 130 characters respectively, which is way bigger than most identifiers. To compound this, early Bitcoin transactions simply didn't use the compressed versions so the hexadecimal addresses were 130 characters each! This is not fun or easy for people to communicate by email, much less by voice!

Second, because the public keys are long, this causes a more subtle problem. The UTXO set becomes bigger since this large public key has to be kept around and indexed to see if it's spendable. This may require more resources on the part of nodes.

Third, because we're storing the public key in the scriptPubkey field, it's known to everyone. That means should ECDSA someday be broken, these outputs could be stolen. This is not a very big threat since ECDSA is used in a lot of applications besides Bitcoin and would affect all of those things, too. For example, quantum computing has the potential to break RSA and ECDSA, so having something else in addition to protect these outputs would be nice.

=== Solving the problems with p2pkh

Pay-to-pubkey-hash has a bunch of advantages over p2pk:

1. The addresses are shorter.
2. It's protected by ECDSA/SHA256 and RIPEMD160.

Addresses are shorter due to the use of the SHA256 and RIPEMD160 hashing algorithms. We utilize both in succession and call that HASH160. The result of HASH160 is 160-bits or 20 bytes, which can be encoded into an address.

The actual result is an address that you may have seen on the Bitcoin network, something that looks like this:

1BgGZ9tcN4rm9KBzDn7KprQz87SZ26SAMH

This address actually has within it the 20 bytes in hex that look like this:

751e76e8199196d454941c45d1b3a323f1433bd6

These 20 bytes are the result of doing a HASH160 operation on this SEC pubkey:

0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798

=== p2pkh

Pay-to-pubkey-hash (aka p2pkh) was used during early days of bitcoin, though not nearly as much as p2pk.

Once again, the lockbox where the bitcoins go is the job of the scriptPubKey. The actual scriptPubKey looks like this:

TODO Diagram of p2pkh scriptPubKey

Note that OP_CHECKSIG is still here and OP_HASH160 makes an appearance. Also note that the sec pubkey has disappeared and has been replaced by the 20 byte hash.

The scriptSig, or the unlocking part of the script looks like this:

TODO Diagram of p2pkh scriptSig

As before the scriptSig has the DER signature. Unlike p2pk, however, the scriptSig now also has the SEC pubkey. In essence, the pubkey has moved from scriptPubKey to scriptSig.

The scriptPubKey and scriptSig combine to make a processing stack that looks like this:

TODO Diagram of the p2pkh script stack

At this point, the script is processed one item at a time.

TODO showing how p2pkh stack resolves

Essentially, the hash of the public key is what the scriptPubKey contains. The OP_DUP, OP_HASH160 and OP_EQUALVERIFY essentially check that the public key does indeed hash to this value. The rest of the operations are the same as p2pk in the sense that the signature is checked for validity against the very pubkey whose hash was checked.

=== Scripts can be anything

Note that scripts can essentially be anything. Script is a smart contract language and you can express the conditions under which the bitcoins can be unlocked in any manner that you wish. The one limitation is that you can't use loops.

TODO exercises on simple scripts
TODO Peter Todd's SHA1 pinata